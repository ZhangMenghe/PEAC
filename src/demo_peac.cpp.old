#include "AHCPlaneFitter.hpp"
#include <math.h> 
#include <fstream>
#include <string>
using namespace std;

struct OrganizedImage3D {
    const cv::Mat_<cv::Vec3f>& cloud;
    //note: ahc::PlaneFitter assumes mm as unit!!!
    OrganizedImage3D(const cv::Mat_<cv::Vec3f>& c): cloud(c) {}
    inline int width() const { return cloud.cols; }
    inline int height() const { return cloud.rows; }
    inline bool get(const int row, const int col, double& x, double& y, double& z) const {
        const cv::Vec3f& p = cloud.at<cv::Vec3f>(row,col);
        x = p[0];
        y = p[1];
        z = p[2];
        return z > 0 && std::isnan(z)==0; //return false if current depth is NaN
    }
};
typedef ahc::PlaneFitter< OrganizedImage3D > PlaneFitter;

cv::Mat_<cv::Vec3f> getPointCloudSparse(std::string filename, int img_width, int img_height){
    std::ifstream file(filename);
    
    cv::Mat_<cv::Vec3f> cloud(img_height, img_width);
    for(int r=0; r<img_height; r++){
        cv::Vec3f* pt_ptr = cloud.ptr<cv::Vec3f>(r);

        for(int c=0; c<img_width; c++){
            pt_ptr[c][0] = .0f;
            pt_ptr[c][1] = .0f;
            pt_ptr[c][2] = 1000.0f;
        }
    }
        
    if(file.is_open()){
        std::string line;
        std::vector<float> tmp(5, .0f);
        while(getline(file, line)){
            line.erase(std::remove(line.begin(), line.end(), '\n'), line.end());
            std::istringstream ss(line);
            int i=0;
            
            do{
                if(i > 4) break;
                std::string num;
                ss>>num;
                tmp[i] = std::stof(num);
                i++;
            }while(ss);
            // std::cout<<int(tmp[0])<<" "<< int(tmp[1])<<std::endl;
            cloud(int(tmp[0]), int(tmp[1])) = cv::Vec3f(tmp[2]*1000.0, tmp[3]*1000.0, tmp[4]*1000.0);
            // cloud.at<cv::Vec3f>(int(tmp[0]), int(tmp[1])) = cv::Vec3f(tmp[2]*1000.0, tmp[3]*1000.0, tmp[4]*1000.0);
        }
        file.close();
    }
    return cloud;

}
cv::Mat_<cv::Vec3f> getPointCloud(cv::Mat depth, float f, float cx, float cy, float max_use_range){
    cv::Mat_<cv::Vec3f> cloud(depth.rows, depth.cols);
    for(int r=0; r<depth.rows; r++){
        const unsigned short* depth_ptr = depth.ptr<unsigned short>(r);
        cv::Vec3f* pt_ptr = cloud.ptr<cv::Vec3f>(r);
        for(int c=0; c<depth.cols; c++)
        {
            float z = (float)depth_ptr[c]/5000.0;
            if(z>max_use_range){z=0;}
            pt_ptr[c][0] = (c-cx)/f*z*1000.0;//m->mm
            pt_ptr[c][1] = (r-cy)/f*z*1000.0;//m->mm
            pt_ptr[c][2] = z*1000.0;//m->mm
            // std::cout<<pt_ptr[c][0]<<" "<<pt_ptr[c][1]<<" "<<pt_ptr[c][2]<<std::endl;
        }
    }
    return cloud;
}

PlaneFitter getPlaneFitter(){
    PlaneFitter pf;
    pf.minSupport = 3000;
    pf.windowWidth = 20;
    pf.windowHeight = 20;
    pf.doRefine = true;
    return pf;
}
int main(){
    PlaneFitter pf = getPlaneFitter();

    cv::Mat depth = cv::imread("../resource/1305031103.027881.png",cv::IMREAD_ANYDEPTH);
    cv::Mat seg(depth.rows, depth.cols, CV_8UC3);

    OrganizedImage3D Ixyz(getPointCloud(depth, 525, 319.5, 239.5, 10));
    // OrganizedImage3D Ixyz(getPointCloud("../points/220.txt", 640, 480));
    // cv::Mat seg(480,640, CV_8UC3);

    std::vector<std::vector<int>> membership;
    pf.run(&Ixyz, &membership, &seg);
    std::cout<<"members: "<< membership.size();
    for(auto member:membership){
        std::cout<<"point num "<< member.size();
    }

    cv::Mat depth_color;
    depth.convertTo(depth_color, CV_8UC1, 50.0/5000);
    applyColorMap(depth_color, depth_color, cv::COLORMAP_JET);
    cv::imshow("seg",seg);
    cv::imshow("depth",depth_color);
    cv::waitKey();
}
